<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdk8 on CoderLeftEar&#39;s Blog</title>
    <link>https://inkbambo0.github.io/categories/jdk8/</link>
    <description>Recent content in jdk8 on CoderLeftEar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Sep 2019 09:26:35 +0800</lastBuildDate>
    
	<atom:link href="https://inkbambo0.github.io/categories/jdk8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jdk8-10-Stream笔记02</title>
      <link>https://inkbambo0.github.io/post/jdk8-10-stream%E7%AC%94%E8%AE%B002/</link>
      <pubDate>Tue, 03 Sep 2019 09:26:35 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-10-stream%E7%AC%94%E8%AE%B002/</guid>
      <description>Stream笔记02 1. 添加数据到List集合中：
Student s1 = new Student(&amp;quot;zhangsan&amp;quot;, 80); Student s2 = new Student(&amp;quot;lisi&amp;quot;, 90); Student s3 = new Student(&amp;quot;wangwu&amp;quot;, 100); Student s4 = new Student(&amp;quot;zhaoliu&amp;quot;, 90); Student s5 = new Student(&amp;quot;zhaoliu&amp;quot;, 50); List&amp;lt;Student&amp;gt; students = Arrays.asList(s1, s2, s3, s4, s5);  分数最小值的学生：
students.stream(). // min(Comparator.comparingInt(student -&amp;gt; student.getScore())).ifPresent(System.out::println); collect(Collectors.minBy( Comparator.comparingInt(student -&amp;gt; student.getScore()) )).ifPresent(System.out::println); 结果： Student(name=zhaoliu, score=50)  获得分数最大值的学生：
students.stream(). collect(Collectors.maxBy( Comparator.comparingInt(student -&amp;gt; student.getScore()) )).ifPresent(System.out::println); 结果： Student(name=wangwu, score=100)  平均分：</description>
    </item>
    
    <item>
      <title>Jdk8-09-Method Reference</title>
      <link>https://inkbambo0.github.io/post/jdk8-09-method-reference/</link>
      <pubDate>Mon, 02 Sep 2019 23:31:04 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-09-method-reference/</guid>
      <description>method reference Student类：
class Student { private String name; private int score; public static int compareStudentByName1(Student s1, Student s2) { return s1.getName().compareTo(s2.getName()); } public static int compareStudentByScore1(Student s1, Student s2) { return s1.getScore() - s2.getScore(); } public static int compareStudentByName2(Student s1, Student s2) { return s1.getName().compareTo(s2.getName()); } public static int compareStudentByScore2(Student s1, Student s2) { return s1.getScore() - s2.getScore(); } }  Student1类：
class Student1 { public int compareStudentByName(Student s1, Student s2) { return s1.</description>
    </item>
    
    <item>
      <title>Jdk8-Collector</title>
      <link>https://inkbambo0.github.io/post/jdk8-collector/</link>
      <pubDate>Fri, 16 Aug 2019 17:35:01 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-collector/</guid>
      <description>Jdk8-Collector collect: 收集器
Collector作为collect方法的参数
Collector是一个接口，是一个可变的汇聚操作，该操作将输入元素累积到一个可变的结果容器中（例：ArrayList可变，其中的元素是可以增加的），可选的将累计的结果转换为一个最终的表示形式，在所有元素处理完毕之后。支持串行合并行两种方式执行。
汇聚操作：将元素累积到Collection中，使用StringBuilder，计算关于sum、min、max或average等元素的汇总信息，计算“数据透视表”摘要（如“卖方最大成交金额”等）。Collectors提供了许多常见的可变汇聚的实现。Collectors本身实际上是一个工厂。
Collector有四个函数指定，将条目累积到一个可变的结果容器中，并且可选的对结果进行最终的转换：
Collector&amp;lt;T, A, R&amp;gt; T: 流中每一个元素的类型。
A: 中间生成的结果容器的类型，例：ArrayList类型。
R: 汇聚操作单结果类型。
Supplier&amp;lt;A&amp;gt; supplier()：创建并返回一个新的结果容器。 BiConsumer&amp;lt;A, T&amp;gt; accumulator()：将一个新的数据元素（流中的每个元素）折叠到可变结果容器当中。 BinaryOperator&amp;lt;A&amp;gt; combiner()： 1.将两个结果容器合并为一个。 2.接受两个部分结果并将其合并的函数。组合器函数可以将状态从一个参数折叠到另一个参数并返回该参数（集合A，B，将B全部放到A中），或者返回一个新的结果容器（集合A，B，将A、B放到新的集合C中）。 BinaryOperator&amp;lt;A&amp;gt; combiner()：从中间积累类型执行最后的转换到最终结果类型 Function&amp;lt;A, R&amp;gt; finisher()：操作A（结果容器），返回R。  为了确保串行与并行操作结果的等价性，Collector函数需要满足的两个条件：identity（同一性）与associativity（结合性）。
同一性
{@code a} must be equivalent to {@code combiner.apply(a, supplier.get())}.   a == combiner.applu(a, supplier.get());
 相当于：
 combiner == (List list1, List list2) -&amp;gt; {list1.addAll(list2), return list1;}
 结合性
串行：调用BiConsumer的双参，无返回指的accept()方法，将输入元素t1，t2放到a1中，最后强转给r1。
A a1 = supplier.get(); accumulator.accept(a1, t1); accumulator.</description>
    </item>
    
    <item>
      <title>Jdk8-08-Stream笔记01</title>
      <link>https://inkbambo0.github.io/post/jdk8-08-stream%E7%AC%94%E8%AE%B001/</link>
      <pubDate>Sat, 10 Aug 2019 10:14:41 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-08-stream%E7%AC%94%E8%AE%B001/</guid>
      <description>Stream笔记01  Stream笔记01  例1：过滤name、age (直接采用Stream -&amp;gt; 通过BiFunction调用apply方法 -&amp;gt; 直接传递行为) 例2：将List集合中的字符串转换为大写 例3：Optional reduce(BinaryOperator accumulator)的使用和数组、List与Stream之间的转换 例4：range、rangeClose的使用 例5：T reduce(T identity, BinaryOperator accumulator)的使用 例6：Stream类中toArray、collect（函数式接口）、toSet无序输出、TreeSet自然排序和joining字符串拼接 例7：map和flatMap的使用 例8：generate、iterate-limit、使用具体方法mapToInt、summaryStatistics和顺逆序排列 例9：串行流和并行流 例10：打印第一个长度为5的字符串的长度 例11：flatMap 例12：互相打招呼（flatMap和map的结合使用） 例13：分组(groupingBy)和分区(partitioningBy)   例1：过滤name、age (直接采用Stream -&amp;gt; 通过BiFunction调用apply方法 -&amp;gt; 直接传递行为) 定义Person类，并进行赋值：
 Person person1 = new Person(&amp;quot;张三&amp;quot;, 20); Person person2 = new Person(&amp;quot;李四&amp;quot;, 30); Person person3 = new Person(&amp;quot;王五&amp;quot;, 40); List&amp;lt;Person&amp;gt; persons = new ArrayList&amp;lt;&amp;gt;(); persons.add(person1); persons.add(person2); persons.add(person3);  创建PersonTest对象：
 PersonTest personTest = new PersonTest();</description>
    </item>
    
    <item>
      <title>Jdk8-07-BinaryOperator</title>
      <link>https://inkbambo0.github.io/post/jdk8-07-binaryoperator/</link>
      <pubDate>Sat, 10 Aug 2019 09:57:17 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-07-binaryoperator/</guid>
      <description>BinaryOperator BinaryOperator：是一个继承了BiFunction的接口，本身有两个比较大小的方法。minBy(); 和 maxBy();
 BinaryOperatorTest binaryOperatorTest = new BinaryOperatorTest();
&amp;lt;T&amp;gt; BinaryOperator minBy(Comparator&amp;lt;? super T&amp;gt; comparator)
 四则运算
BinaryOperator&amp;lt;Integer&amp;gt; binaryOperator = (value1, value2) -&amp;gt; value1 * value2; //封装在方法中，传参 System.out.println(binaryOperatorTest.operatorFun(3, 4, binaryOperator)); //直接调用apply方法调用 System.out.println(binaryOperator.apply(3, 4)); //四则运算 public Integer operatorFun(int a, int b, BinaryOperator&amp;lt;Integer&amp;gt; binaryOperator){ return binaryOperator.apply(a, b); } 答案：12，12  大小比较：第三个参数传一个lambda，比较长度还是大小，写对应的lambda
System.out.println(binaryOperatorTest.operatorFunMin(&amp;quot;abbbbbb&amp;quot;, &amp;quot;bbb&amp;quot;, (value1, value2) -&amp;gt; value1.compareTo(value2))); System.out.println(binaryOperatorTest.operatorFunMin(&amp;quot;abbbbbb&amp;quot;, &amp;quot;bbb&amp;quot;, (value1, value2) -&amp;gt; value1.length() - value2.length())); public String operatorFunMin(String a, String b, Comparator&amp;lt;String&amp;gt; comparator){ return BinaryOperator.</description>
    </item>
    
    <item>
      <title>Jdk8-02-Consumer</title>
      <link>https://inkbambo0.github.io/post/jdk8-02-consumer/</link>
      <pubDate>Fri, 09 Aug 2019 11:10:57 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-02-consumer/</guid>
      <description> Consumer Consumer：接收一个参数，无返回值。
List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;); Consumer&amp;lt;String&amp;gt; consumer = item -&amp;gt; System.out.println(item); list.forEach(consumer);  </description>
    </item>
    
    <item>
      <title>Jdk8-04-Optional</title>
      <link>https://inkbambo0.github.io/post/jdk8-04-optional/</link>
      <pubDate>Fri, 09 Aug 2019 11:10:02 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-04-optional/</guid>
      <description>Optional Optional：主要解决空指针异常。使用of()、ofNullable()创建包含值的optional。
of()：传入null，会报空指针异常。 ofNullable()：可以穿null，不会报异常。
 Optional optional = Optional.ofNullable(&amp;ldquo;hello&amp;rdquo;);
 使用isPresent方法判断optional是否为空，和传统做法差不多，不推荐使用。
if(optional.isPresent()) { System.out.println(optional.get()); }  推荐使用此种方法
optional.ifPresent(item -&amp;gt; System.out.println(item));  orElse：如果optional中有值，返回该值，否则返回orElse中的值。
orElseGet：如果optional中有值，返回该值，它会执行作为参数传入Supplier函数式接口，并返回结果。
System.out.println(optional.orElse(&amp;quot;world&amp;quot;)); System.out.println(optional.orElseGet(() -&amp;gt; &amp;quot;hahaha&amp;quot;));  雇员和公司类：
@Data @AllArgsConstructor class Employee{ private String name; } @Data @AllArgsConstructor class Company{ private String name; private List&amp;lt;Employee&amp;gt; employees; public Company(String name) { this.name = name; } }  传统方法 &amp;ndash;&amp;gt; 判断Company中的employee是否有值
Employee emp1 = new Employee(&amp;quot;zhangsan&amp;quot;); Employee emp2 = new Employee(&amp;quot;lisi&amp;quot;); Company c = new Company(&amp;quot;haha&amp;quot;); //员工集合 List&amp;lt;Employee&amp;gt; employees = Arrays.</description>
    </item>
    
    <item>
      <title>Jdk8-05-Predicate</title>
      <link>https://inkbambo0.github.io/post/jdk8-05-predicate/</link>
      <pubDate>Fri, 09 Aug 2019 11:09:49 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-05-predicate/</guid>
      <description>Predicate Predicate：接收一个输入参数，返回一个Boolean值。
包括一个返回值是Boolean的test方法、三个默认方法和一个静态isEqual()。
test里是输入参数：
Predicate&amp;lt;String&amp;gt; predicate = P -&amp;gt; P.length() &amp;gt; 5; System.out.println(predicate.test(&amp;quot;Hello World!&amp;quot;));  Predicate中的静态方法isEqual：
System.out.println(Predicate.isEqual(&amp;quot;test&amp;quot;).test(&amp;quot;tes7t&amp;quot;));  and, or和negate使用在filter中：
List&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); Predicate&amp;lt;Integer&amp;gt; p1 = i -&amp;gt; i &amp;gt; 2; Predicate&amp;lt;Integer&amp;gt; p2 = i -&amp;gt; i &amp;lt; 8; Predicate&amp;lt;Integer&amp;gt; p3 = i -&amp;gt; i % 2 != 0; list.stream().filter(p1.and(p2).and(p3.negate())).collect(Collectors.toList()).forEach(System.out::println);  答案是：偶数 &amp;ndash; 4, 6</description>
    </item>
    
    <item>
      <title>Jdk8-06-Supplier</title>
      <link>https://inkbambo0.github.io/post/jdk8-06-supplier/</link>
      <pubDate>Fri, 09 Aug 2019 11:09:35 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-06-supplier/</guid>
      <description> Supplier Supplier：不接受参数，返回结果，用来创建对象。
Supplier是个接口，有一个get()方法，创建完对象后，如要调用需要先调用自身的get()。
Student类：
@Data @NoArgsConstructor class Student{ private String name = &amp;quot;张三&amp;quot;; }  使用内部类：
Supplier&amp;lt;Student&amp;gt; supplier = new Supplier&amp;lt;Student&amp;gt;() { @Override public Student get() { return new Student(); } }; System.out.println(supplier.get().getName());  使用Lambda表达式：
supplier = () -&amp;gt; new Student(); System.out.println(supplier.get().getName());  使用方法引用：
supplier = Student::new; System.out.println(supplier.get().getName());  </description>
    </item>
    
    <item>
      <title>Jdk8-03-Function</title>
      <link>https://inkbambo0.github.io/post/jdk8-03-function/</link>
      <pubDate>Fri, 09 Aug 2019 11:09:07 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-03-function/</guid>
      <description>Function Function：接收一个参数返回一个结果。
BiFunction：接收两个参数返回一个结果。
创建对象：
&amp;gt; FunctionDemo functionDemo = new FunctionDemo();

在内部使用：
System.out.println(functionDemo.convert(2, value -&amp;gt; { return value;})); System.out.println(functionDemo.convert(3, value -&amp;gt; { return ((int)value * (int)value);})); public Object convert1(Object obj, Function&amp;lt;Object, Object&amp;gt; function){ return function.apply(obj); }  将lambda抽取出来,加法：
Function&amp;lt;Object, Object&amp;gt; function = value -&amp;gt; ((int)value + (int)value); Object obj = functionDemo.convert1(5, function); System.out.println(obj); public Object convert1(Object obj, Function&amp;lt;Object, Object&amp;gt; function){ return function.apply(obj); }  compose的使用：
System.out.println(functionDemo.convert2(5, value -&amp;gt; (int)value + 1, value -&amp;gt; (int)value * (int)value)); public Object convert2(Object obj, Function&amp;lt;Object, Object&amp;gt; function1, Function&amp;lt;Object, Object&amp;gt; function2){ //compose原理 //return function2.</description>
    </item>
    
    <item>
      <title>Jdk8-01-Lambda</title>
      <link>https://inkbambo0.github.io/post/jdk8-01-lambda/</link>
      <pubDate>Fri, 09 Aug 2019 11:08:54 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/jdk8-01-lambda/</guid>
      <description>Lambda 关于函数式接口： - 如果一个接口只有一个抽象方法，那么该接口就是一个函数式接口
- 如果我们在某个接口上声明了FunctionalInterface注解，那么编译器就会按照函数式接口的定义来要求该接口
- 如果某个接口只有一个抽象方法，但我们并没有给改接口声明FunctionalInterface注解，那么编译器依旧会将该接口看作是函数式接口

 如果函数式接口中存在Object类中的的方法时，不会算入总方法数，会看作基础Object类
 案例：
List&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);  System.out.println(&amp;quot;--------foreach遍历--------&amp;quot;); //foreach遍历 for (Integer num : list) { System.out.println(num); }  System.out.println(&amp;quot;--------for循环--------&amp;quot;); //for循环 for(int i = 0; i &amp;lt; list.size(); i ++){ System.out.println(list.get(i)); }  System.out.println(&amp;quot;--------内部类--------&amp;quot;); list.forEach(new Consumer&amp;lt;Integer&amp;gt;() { @Override public void accept(Integer integer) { System.out.println(integer); } });  System.out.println(&amp;quot;--------Lambda--------&amp;quot;); //Lambda list.forEach(i -&amp;gt; System.</description>
    </item>
    
  </channel>
</rss>