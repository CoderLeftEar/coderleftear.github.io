<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUC on CoderLeftEar&#39;s Blog</title>
    <link>https://inkbambo0.github.io/tags/juc/</link>
    <description>Recent content in JUC on CoderLeftEar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Oct 2019 09:22:04 +0800</lastBuildDate>
    
	<atom:link href="https://inkbambo0.github.io/tags/juc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java-JUC</title>
      <link>https://inkbambo0.github.io/post/java-juc/</link>
      <pubDate>Wed, 16 Oct 2019 09:22:04 +0800</pubDate>
      
      <guid>https://inkbambo0.github.io/post/java-juc/</guid>
      <description>Java-JUC 什么是进程、线程？ 1、进程： 进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本分配单元，也是基本执行单元。（一个QQ.exe的运行就是一个进程，word程序进程）。
2、线程： 通常一个进程中可以包含若干个线程，当然一个进程中至少一个线程，不然没有存在意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。（QQ中和每个人聊天就是每一个线程，word中检查拼写错误的线程）。
什么是并发、并行？ 1、并发： 多个线程同一个时间点争取同一个资源。
2、并行 同一个时间点多个任务同时执行。
多项工作一起执行，之后再汇总。
Ticket 实现多线程的方式：  继承Thread类,重写run()方法 实现Runnable接口,实现run()方法 实现Callable接口，实现call()方法 通过线程池创建线程  高内聚高耦合： 高内聚： 空调的制冷和制热，是空调自带的，内聚在空调中的。
低耦合： 例：前后端分离，互相依赖最小。
多线程与操作系统有关，多线程不是.start();后立刻启动，而是进入就绪状态，等待操作系统和CPU调用run方法的时候，开始启动。
Thread.State  NEW：新建 RUNNABLE：就绪，可运行 BLOCKED：阻塞 WAITING：等待，不见不散 TIMED_WAITING：等待，超时不见 TERMINATED：终结  wait：放开锁去睡
sleep：握着锁去睡
函数式接口： 只能有一个普通方法，可以有多个defalt方法，多个静态方法，多个Object中的方法。
线程 -&amp;gt; 操作(对外暴露的方法) -&amp;gt; 资源类 通过Lock接口进行上锁和解锁： public class ThreadDemo02 { public static void main(String[] args) { final Ticket ticket = new Ticket(); // new Thread(new Runnable() { // @Override // public void run() { // for (int i = 0; i &amp;lt; 4000; i ++) { // ticket.</description>
    </item>
    
  </channel>
</rss>